#include <iostream>
#include <vector>
#include <algorithm>

// Potion class to represent health and mana potions
class Potion {
public:
    int points;   // Healing or Mana points provided by the potion
    int quantity; // Number of available potions

    // Constructor to initialize potion points and quantity
    Potion(int p, int q) : points(p), quantity(q) {}
};

// Player class to represent each player in the game
class Player {
private:
    std::string name;       // Player's name
    int currentHealth;      // Current health of the player
    int maxHealth;          // Maximum health of the player
    int currentMana;        // Current mana of the player
    int maxMana;            // Maximum mana of the player

public:
    // Constructor to initialize player attributes
    Player(std::string n, int ch, int mh, int cm, int mm) 
        : name(n), currentHealth(ch), maxHealth(mh), 
          currentMana(cm), maxMana(mm) {}

    // Heal the player by a certain amount
    void heal(int amount) {
        currentHealth += amount; // Increase current health by the heal amount
        if (currentHealth > maxHealth) {
            currentHealth = maxHealth;  // Cap health at maximum
        }
    }

    // Restore mana for the player
    void restoreMana(int amount) {
        currentMana += amount; // Increase current mana by the restore amount
        if (currentMana > maxMana) {
            currentMana = maxMana;  // Cap mana at maximum
        }
    }

    // Check if player needs healing
    bool needsHealing() const { return currentHealth < maxHealth; }

    // Check if player needs mana restoration
    bool needsMana() const { return currentMana < maxMana; }

    // Getters for player attributes
    int getCurrentHealth() const { return currentHealth; }
    int getMaxHealth() const { return maxHealth; }
    int getCurrentMana() const { return currentMana; }
    int getMaxMana() const { return maxMana; }
    std::string getName() const { return name; }

    // Display player's current status
    void displayStatus() const {
        std::cout << name << " | Health: " << currentHealth << "/" << maxHealth 
                  << " | Mana: " << currentMana << "/" << maxMana << std::endl;
    }
};

// Function to display the remaining potions
void displayPotionLog(const std::vector<Potion>& potions, const std::string& type) {
    std::cout << "=== " << type << " Potions ===" << std::endl; // Title for potion type
    std::cout << type + " Points | Quantity" << std::endl; // Column headers
    std::cout << std::string(30, '-') << std::endl; // Separator line
    
    // Loop through each potion to display its points and quantity
    for (const auto& potion : potions) {
        std::cout << potion.points << "          | " << potion.quantity << std::endl;
    }
    std::cout << std::endl; // Extra line for spacing
}

// Function to heal players using the available potions
void healPlayers(std::vector<Player>& players, std::vector<Potion>& healthPotions, std::vector<Potion>& manaPotions) {
    std::sort(healthPotions.begin(),healthPotions.end(),[](const Potion& leftPotion,const Potion& rightPotion){
        return leftPotion.points > rightPotion.points;
    });
    std::sort(manaPotions.begin(),manaPotions.end(),[](const Potion& leftPotion,const Potion& rightPotion){
        return leftPotion.points > rightPotion.points;
    });
    displayPotionLog(healthPotions, "Health"); // Display health potions
    displayPotionLog(manaPotions, "Mana");     // Display mana potions

    std::vector<std::string> potionLog; // Log for potions used

    std::cout << "=========================================\n";
    std::cout << "           PLAYER STATUS                \n";
    std::cout << "=========================================\n";

    // Loop through each player to heal and restore mana
    for (auto& player : players) {
        player.displayStatus(); // Display player's status before healing
        int requiredHealAmount = player.getMaxHealth()-player.getCurrentHealth();
       
            for (int i= 0;i<healthPotions.size();++i){
                auto potion=healthPotions[i];
                if(potion.quantity<=0){
                    continue;
                } ///newstuff!!!!!!
                if(requiredHealAmount >= potion.points){
                    requiredHealAmount-=potion.points;
                    player.heal(potion.points);  
                    potionLog.push_back(player.getName() + " used a health potion of " + std::to_string(potion.points) + " points."); // Log potion use
                    potion.quantity--;
                    i=0;
                }
            }
    
      int requiredmanaAmount = player.getMaxMana()-player.getCurrentMana();
       
            for (int i= 0;i<manaPotions.size();++i){
                auto potion=manaPotions[i];
                if(potion.quantity<=0){
                    continue;
                }
                if(requiredmanaAmount >= potion.points){
                    requiredmanaAmount-=potion.points;
                    player.restoreMana(potion.points);  
                    potionLog.push_back(player.getName() + " used a health potion of " + std::to_string(potion.points) + " points."); // Log potion use
                    potion.quantity--;
                    i=0;
                }
            }

        // Indicate healing occurred and display updated status
        std::cout << "healed too\n";  
        player.displayStatus(); // Display player's status after healing
        std::cout << "-----------------------------------------\n";
    }

    // Display remaining potions after usage
    displayPotionLog(healthPotions, "Remaining Health"); // Display remaining health potions
    displayPotionLog(manaPotions, "Remaining Mana");     // Display remaining mana potions

    // Log of potions used
    std::cout << "=== Potions Used ===" << std::endl;
    for (const auto& log : potionLog) {
        std::cout << log << std::endl; // Display each log entry for potions used
    }
}

int main() {
    // Initialize players with their health and mana attributes
    std::vector<Player> players = { 
        {"Mage", 90, 100, 30, 60}, // Player: Mage, current health: 50, max health: 100, current mana: 30, max mana: 60
        {"Knight", 70, 100, 40, 80}, // Player: Knight, current health: 70, max health: 100, current mana: 40, max mana: 80
        {"Rogue", 65, 100, 20, 50}, // Player: Rogue, current health: 65, max health: 100, current mana: 20, max mana: 50
        {"Cleric", 85, 100, 50, 90}  // Player: Cleric, current health: 85, max health: 100, current mana: 50, max mana: 90
    };
    
    // Initialize potions available for healing and mana restoration
    std::vector<Potion> healthPotions = {  {50, 3}, {20, 5},{10, 4} };  // Health potions: 3 potions of 50 points, 5 potions of 20 points, 10 potions of 10 points
    std::vector<Potion> manaPotions = { {30, 2}, {15, 4}, { 5 , 2} };     // Mana potions: 2 potions of 30 points, 4 potions of 15 points, 8 potions of 5 points

    healPlayers(players, healthPotions, manaPotions); // Call the function to heal players
    return 0; // End of the program
}
