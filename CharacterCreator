#include <iostream>
#include <string>
#include <map>
#include <vector>

// Define the character classes
enum class CharacterClass
{
    Warrior,
    Rogue,
    Mage,
    Wizard,
    Ranger,
    Monk,
    Bard,
    Paladin,
    Cleric
};

// Function to convert enum to string
std::string toString(CharacterClass characterClass) {
    switch (characterClass) {
        case CharacterClass::Warrior: return "Warrior";
        case CharacterClass::Rogue: return "Rogue";
        case CharacterClass::Mage: return "Mage";
        case CharacterClass::Wizard: return "Wizard";
        case CharacterClass::Ranger: return "Ranger";
        case CharacterClass::Monk: return "Monk";
        case CharacterClass::Bard: return "Bard";
        case CharacterClass::Paladin: return "Paladin";
        case CharacterClass::Cleric: return "Cleric";
        default: return "Unknown";
    }
}

// Character base class
class Character
{
public:
    std::string name;
    CharacterClass characterClass;
    int strength, agility, endurance, intelligence, willpower, speed, luck;

    Character(std::string n, CharacterClass c)
        : name(n), characterClass(c), strength(5), agility(5), endurance(5),
        intelligence(5), willpower(5), speed(5), luck(5) {}

    virtual void PrintCharacterInfo() {
        std::cout << "Name: " << name << ", Class: " << toString(characterClass) << std::endl;
        std::cout << "Strength: " << strength << ", Agility: " << agility
                  << ", Endurance: " << endurance << ", Intelligence: " << intelligence
                  << ", Willpower: " << willpower << ", Speed: " << speed
                  << ", Luck: " << luck << std::endl;
    }

    virtual ~Character() = default;
};

// Character Factory
class CharacterFactory
{
private:
    static const std::map<CharacterClass, std::vector<int>> classStats;

public:
    static Character* CreateCharacter(const std::string& name, CharacterClass charClass)
    {
        // Check if the class exists in the map
        auto it = classStats.find(charClass);
        if (it == classStats.end()) {
            std::cout << "Invalid character class!" << std::endl;
            return nullptr;
        }

        // Create the character and set the stats
        Character* character = new Character(name, charClass);
        const std::vector<int>& stats = it->second;

        character->strength = stats[0];
        character->agility = stats[1];
        character->endurance = stats[2];
        character->intelligence = stats[3];
        character->willpower = stats[4];
        character->speed = stats[5];
        character->luck = stats[6];

        return character;
    }
};

// Static initialization of the classStats map
const std::map<CharacterClass, std::vector<int>> CharacterFactory::classStats = {
    {CharacterClass::Warrior, {10, 8, 9, 7, 6, 5, 4}},
    {CharacterClass::Rogue, {7, 10, 6, 8, 6, 9, 8}},
    {CharacterClass::Mage, {5, 6, 6, 10, 7, 6, 5}},
    {CharacterClass::Wizard, {4, 5, 6, 10, 8, 4, 6}},
    {CharacterClass::Ranger, {8, 9, 7, 7, 6, 8, 7}},
    {CharacterClass::Monk, {8, 8, 9, 7, 9, 7, 5}},
    {CharacterClass::Bard, {6, 7, 6, 8, 6, 7, 10}},
    {CharacterClass::Paladin, {9, 7, 10, 7, 9, 6, 5}},
    {CharacterClass::Cleric, {5, 5, 7, 8, 9, 4, 7}}
};

// Decorator for adding abilities or modifiers to characters
class CharacterDecorator : public Character
{
protected:
    Character* character;

public:
    CharacterDecorator(Character* c) : Character(c->name, c->characterClass), character(c) {}

    virtual void PrintCharacterInfo() override
    {
        character->PrintCharacterInfo();
    }
};

// Concrete Decorator: EnchantedArmor (for example)
class EnchantedArmorDecorator : public CharacterDecorator
{
public:
    EnchantedArmorDecorator(Character* c) : CharacterDecorator(c) {}

    void PrintCharacterInfo() override
    {
        character->PrintCharacterInfo();
        std::cout << "Equipped with Enchanted Armor: +2 Strength, +1 Endurance" << std::endl;
        character->strength += 2;
        character->endurance += 1;
    }
};

// Concrete Decorator: SpecialWeapon (for example)
class SpecialWeaponDecorator : public CharacterDecorator
{
public:
    SpecialWeaponDecorator(Character* c) : CharacterDecorator(c) {}

    void PrintCharacterInfo() override
    {
        character->PrintCharacterInfo();
        std::cout << "Equipped with Special Weapon: +3 Agility, +2 Luck" << std::endl;
        character->agility += 3;
        character->luck += 2;
    }
};

int main()
{
    // Prompt user for character name
    std::string name;
    std::cout << "Enter character name: ";
    std::getline(std::cin, name);

    // Prompt user to choose a character class
    std::cout << "Choose a character class:\n";
    std::cout << "1. Warrior\n2. Rogue\n3. Mage\n4. Wizard\n5. Ranger\n6. Monk\n7. Bard\n8. Paladin\n9. Cleric\n";
    int choice;
    std::cout << "Enter the number for the class: ";
    std::cin >> choice;

    // Map user input to the corresponding character class
    CharacterClass selectedClass;
    switch (choice) {
        case 1: selectedClass = CharacterClass::Warrior; break;
        case 2: selectedClass = CharacterClass::Rogue; break;
        case 3: selectedClass = CharacterClass::Mage; break;
        case 4: selectedClass = CharacterClass::Wizard; break;
        case 5: selectedClass = CharacterClass::Ranger; break;
        case 6: selectedClass = CharacterClass::Monk; break;
        case 7: selectedClass = CharacterClass::Bard; break;
        case 8: selectedClass = CharacterClass::Paladin; break;
        case 9: selectedClass = CharacterClass::Cleric; break;
        default:
            std::cout << "Invalid class choice!" << std::endl;
            return 1;
    }

    // Create character based on the chosen class
    Character* character = CharacterFactory::CreateCharacter(name, selectedClass);
    if (!character) {
        std::cout << "Character creation failed!" << std::endl;
        return 1;
    }

    // Ask if the user wants to equip the character with a special item
    std::cout << "Would you like to equip the character with enchanted armor (1) or a special weapon (2)? (Enter 0 for none): ";
    int equipChoice;
    std::cin >> equipChoice;

    // Decorate character with chosen equipment
    if (equipChoice == 1) {
        character = new EnchantedArmorDecorator(character);
    } else if (equipChoice == 2) {
        character = new SpecialWeaponDecorator(character);
    }

    // Print the final character information
    character->PrintCharacterInfo();

    // Clean up
    delete character;

    return 0;
}
