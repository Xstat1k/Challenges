#include <iostream>

#include <vector>

#include <string>

#include <unordered_map>

 

// Define the target types for spells

enum class TargetType

{

    SingleTarget, // A spell that targets a single entity

    AOE,          // Area of Effect spell that affects multiple targets

    Self          // A spell that affects the caster

};

 

// Define the spell types

enum class SpellType

{

    Damage, // A spell that deals damage

    Heal,   // A spell that restores health

    Buff,   // A spell that enhances a target's abilities

    Debuff  // A spell that weakens a target's abilities

};

 

// The Spell class represents a single spell with its attributes

class Spell

{

public:

    std::string name;       // The name of the spell

    int manaCost;           // The mana cost to cast the spell

    int power;              // The power of the spell (effect strength)

    TargetType target;      // The type of target the spell can affect

    SpellType type;         // The type of spell (Damage, Heal, etc.)

 

    // Default constructor

    Spell() : name(""), manaCost(0), power(0), target(TargetType::SingleTarget), type(SpellType::Damage) {}

 

    // Constructor to initialize a Spell object

    Spell(std::string n, int mCost, int p, TargetType t, SpellType st)

        : name(n), manaCost(mCost), power(p), target(t), type(st) {}

 

    // Function to print the details of the spell

    void PrintSpell() const

    {

        std::cout << "Name: " << name << ", Mana Cost: " << manaCost

                  << ", Power: " << power << ", Target: " << GetTargetTypeAsString()

                  << ", Type: " << GetSpellTypeAsString() << std::endl;

    }

 

    // Convert the TargetType to a string for display

    std::string GetTargetTypeAsString() const

    {

        switch (target)

        {

        case TargetType::SingleTarget: return "Single Target";

        case TargetType::AOE: return "AOE";

        case TargetType::Self: return "Self";

        default: return "Unknown";

        }

    }

 

    // Convert the SpellType to a string for display

    std::string GetSpellTypeAsString() const

    {

        switch (type)

        {

        case SpellType::Damage: return "Damage";

        case SpellType::Heal: return "Heal";

        case SpellType::Buff: return "Buff";

        case SpellType::Debuff: return "Debuff";

        default: return "Unknown";

        }

    }

};

 

// Function to create a list of spells

std::vector<Spell> CreateSpells()

{

    // Return a vector of predefined Spell objects

    return {

{"Fireball", 50, 100, TargetType::SingleTarget, SpellType::Damage},

        {"Healing Aura", 30, 50, TargetType::AOE, SpellType::Heal},

        {"Shield", 20, 0, TargetType::Self, SpellType::Buff},

        {"Curse", 40, 60, TargetType::SingleTarget, SpellType::Debuff},

        {"Blizzard", 70, 80, TargetType::AOE, SpellType::Damage},

        {"Regenerate", 25, 30, TargetType::Self, SpellType::Heal},

        {"Lightning Strike", 55, 120, TargetType::SingleTarget, SpellType::Damage},

        {"Mass Shield", 60, 0, TargetType::AOE, SpellType::Buff},

        {"Flame Burst", 45, 110, TargetType::AOE, SpellType::Damage},

        {"Light Aura", 30, 0, TargetType::AOE, SpellType::Buff},

        {"Dark Curse", 40, 70, TargetType::SingleTarget, SpellType::Debuff},

        {"Water Wave", 35, 90, TargetType::AOE, SpellType::Damage},

        {"Thunderbolt", 60, 130, TargetType::SingleTarget, SpellType::Damage},

        {"Earthquake", 65, 150, TargetType::AOE, SpellType::Damage},

        {"Magic Barrier", 50, 0, TargetType::Self, SpellType::Buff},

        {"Invisibility", 30, 0, TargetType::Self, SpellType::Buff},

        {"Meteor Shower", 90, 200, TargetType::AOE, SpellType::Damage},

        {"Ice Spike", 35, 80, TargetType::SingleTarget, SpellType::Damage},

        {"Hurricane", 75, 140, TargetType::AOE, SpellType::Damage},

        {"Holy Light", 20, 40, TargetType::Self, SpellType::Heal},

        {"Lightning Storm", 80, 180, TargetType::AOE, SpellType::Damage},

        {"Sacred Flame", 60, 100, TargetType::SingleTarget, SpellType::Damage},

        {"Venom Strike", 30, 70, TargetType::SingleTarget, SpellType::Debuff},

        {"Frost Nova", 70, 90, TargetType::AOE, SpellType::Damage},

        {"Mana Shield", 40, 0, TargetType::Self, SpellType::Buff},

        {"Arcane Missiles", 45, 85, TargetType::SingleTarget, SpellType::Damage},

        {"Healing Rain", 35, 60, TargetType::AOE, SpellType::Heal},

        {"Divine Protection", 50, 0, TargetType::Self, SpellType::Buff},

        {"Poison Cloud", 50, 100, TargetType::AOE, SpellType::Debuff},

        {"Stone Skin", 25, 0, TargetType::Self, SpellType::Buff},

        {"Life Drain", 50, 70, TargetType::SingleTarget, SpellType::Debuff},

        {"Phoenix Fire", 100, 250, TargetType::AOE, SpellType::Damage},

        {"Raging Inferno", 90, 210, TargetType::AOE, SpellType::Damage},

        {"Whirlwind", 55, 85, TargetType::AOE, SpellType::Damage},

        {"Blessing of Light", 30, 0, TargetType::Self, SpellType::Buff},

        {"Shadow Bolt", 40, 90, TargetType::SingleTarget, SpellType::Damage},

        {"Serpent's Bite", 45, 65, TargetType::SingleTarget, SpellType::Debuff},

        {"Cleansing Wave", 25, 0, TargetType::AOE, SpellType::Heal},

        {"Chill Touch", 35, 50, TargetType::SingleTarget, SpellType::Damage},

        {"Blood Pact", 60, 0, TargetType::Self, SpellType::Buff},

        {"Lunar Strike", 75, 160, TargetType::SingleTarget, SpellType::Damage},

        {"Solar Flare", 65, 140, TargetType::AOE, SpellType::Damage},

        {"Nature's Grasp", 50, 80, TargetType::SingleTarget, SpellType::Buff},

        {"Wrath of the Ancients", 100, 250, TargetType::AOE, SpellType::Damage},

        {"Ethereal Form", 40, 0, TargetType::Self, SpellType::Buff},

        {"Radiant Heal", 30, 70, TargetType::SingleTarget, SpellType::Heal},

        {"Stormcall", 80, 150, TargetType::AOE, SpellType::Damage},

        {"Chain Lightning", 70, 130, TargetType::AOE, SpellType::Damage},

        // Add more spells here

    };

}

 

// Function to create a hash map for spells based on their names

std::unordered_map<std::string, Spell> CreateSpellMap(const std::vector<Spell>& spellList)

{

    std::unordered_map<std::string, Spell> spellMap;

    for (const auto& spell : spellList)

    {

        spellMap[spell.name] = spell; // Store spell using its name as the key

    }

    return spellMap;

}

 

// Function to search for spells based on a keyword

void SearchSpells(const std::unordered_map<std::string, Spell>& spellMap, const std::string& keyword)

{

    bool found = false; // Flag to check if any spells matched the search

    for (const auto& pair : spellMap)

    {

        const Spell& spell = pair.second;

        // Check if the keyword matches any of the spell's properties

        if (spell.name.find(keyword) != std::string::npos ||

            spell.GetTargetTypeAsString().find(keyword) != std::string::npos ||

            spell.GetSpellTypeAsString().find(keyword) != std::string::npos)

        {

            spell.PrintSpell(); // Print the matching spell details

            found = true; // Mark that a match was found

        }

    }

 

    if (!found) // If no matches were found

    {

        std::cout << "No spells matched the search criteria." << std::endl; // Notify the user

    }

}

 

int main()

{

    std::vector<Spell> spells = CreateSpells(); // Create a list of spells

    auto spellMap = CreateSpellMap(spells); // Create a hash map of spells

 

    std::string keyword;

    std::cout << "Search terms: Damage, Heal, Buff, Debuff, SingleTarget, AOE, Self" << std::endl;

    std::cout << "Enter a search keyword:" << std::endl;

 

    while (std::getline(std::cin, keyword)) // Loop to continuously take user input

    {

        // Check for an exit command

        if (keyword == "exit")

        {

            break; // Exit the loop if the user types 'exit'

        }

 

        // Search for spells based on the keyword

        SearchSpells(spellMap, keyword);

        std::cout << "\nEnter another search keyword (or type 'exit' to quit):" << std::endl; // Prompt again

    }

 

    return 0; // Exit the program

}
